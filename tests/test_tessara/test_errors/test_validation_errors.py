"""
test_tessara.test_errors.test_validation_errors
===============================================

Tests for the tessara package (validation errors).

This test module performs unit tests for the the base error class and each specific error subclass.

See Also
--------
tessara.errors.validation
"""
from typing import Any

import pytest

from tessara.errors.validation import *

# --- Tests for the base ValidationError class -----------------------------------------------------

@pytest.fixture
def error_message():
    """
    Fixture to generate a test error message.

    Returns
    -------
    str
        Test error message.
    """
    return "Test error message"

def test_validation_error(error_message):
    """
    Test the base `ValidationError` class with a custom error message.
    """
    error = ValidationError(error_message)
    assert str(error) == error_message
    assert error.message == error_message

def test_default_message():
    """
    Test the that the base message is generated by the `format_message` method of the
    `ValidationError` class when no custom message is provided.
    """
    error = ValidationError()
    assert str(error) == error.format_message()

# --- Tests for single-value ValidationError subclasses --------------------------------------------

def test_type_validation_error_single_type():
    """
    Test the `TypeValidationError` class with a single type constraint. It should accept a single
    value and a single type.
    """
    error = TypeValidationError(1, str) # value 1 not a string
    with pytest.raises(TypeValidationError):
        raise error

def test_type_validation_error_multiple_types():
    """
    Test the `TypeValidationError` class with multiple type constraints. It should accept a single
    value and a tuple of types.
    """
    error = TypeValidationError(1, (str, float)) # value 1 not a string or float
    with pytest.raises(TypeValidationError):
        raise error

def test_range_validation_error():
    """
    Test the `RangeValidationError` class with a range constraint. It should accept a single value
    and the range constraints.
    """
    error = RangeValidationError(-1, ge=0, lt=10) # value -1 not in [0, 10)
    with pytest.raises(RangeValidationError):
        raise error

def test_pattern_validation_error():
    """
    Test the `PatternValidationError` class with a regex pattern constraint. It should accept a
    single value and the regex pattern.
    """
    error = PatternValidationError("abc", r"\d+") # value 'abc' not a digit
    with pytest.raises(PatternValidationError):
        raise error

def test_option_validation_error():
    """
    Test the `OptionValidationError` class with a set of allowed options. It should accept a single
    value and a set of allowed options.
    """
    error = OptionValidationError("A", {"B", "C"})
    with pytest.raises(OptionValidationError):
        raise error

def test_custom_validation_error():
    """
    Test the `CustomValidationError` class with a custom validation function. It should accept a
    single value and the custom validation function.
    """
    def is_even(value):
        return value % 2 == 0
    error = CustomValidationError(3, is_even)
    with pytest.raises(CustomValidationError):
        raise error

# --- Tests for multi-value ValidationError subclasses ---------------------------------------------

def test_relation_validation_error_positional_args():
    def is_greater_than(x, y):
        return x > y
    error = RelationValidationError(is_greater_than, args=[1, 2])
    assert str(error) == "Values do not satisfy the relation when calling `is_greater_than(x=1, y=2)`."

def test_relation_validation_error_keyword_args():
    def is_greater_than(x, y):
        return x > y
    error = RelationValidationError(is_greater_than, kwargs={'x': 1, 'y': 2})
    assert str(error) == "Values do not satisfy the relation when calling `is_greater_than(x=1, y=2)`."

def test_check_error():
    try:
        raise ValueError("Original exception")
    except ValueError as e:
        error = CheckError(e)
    assert str(error) == "Execution failed for validation check: Original exception"

def test_global_validation_error():
    errors = [ValidationError("Error 1"), ValidationError("Error 2")]
    error = GlobalValidationError(errors)
    assert str(error) == "Error 1\nError 2"

def test_missing_value_error():
    error = MissingValueError()
    assert isinstance(error, ValidationError)

def test_override_parameter_error():
    error = OverrideParameterError("Parameter overridden")
    assert str(error) == "Parameter overridden"

def test_unknown_parameter_error():
    error = UnknownParameterError("Unknown parameter")
    assert str(error) == "'Unknown parameter'"
